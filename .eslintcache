[{"C:\\Users\\user\\react\\portfolio\\src\\index.js":"1","C:\\Users\\user\\react\\portfolio\\src\\App.js":"2","C:\\Users\\user\\react\\portfolio\\src\\reportWebVitals.js":"3"},{"size":243,"mtime":1610285141658,"results":"4","hashOfConfig":"5"},{"size":20814,"mtime":1611052549758,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1608243964160,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1j883we",{"filePath":"11","messages":"12","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\user\\react\\portfolio\\src\\index.js",[],["17","18"],"C:\\Users\\user\\react\\portfolio\\src\\App.js",["19","20","21","22","23","24","25","26","27","28","29","30"],"import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport React from \"react\";\nimport stackPhoto from \"./assets/img/crabswim.gif\"\n\nfunction App() {\n  const menuContentsRef = useRef();\n  const menuRef = useRef();\n  const isMunuShow = useRef(false);\n  const slideWrapRef = useRef();\n  const progressSliderArray = useRef(null);\n  const pageArray = new Array();\n  const currentPage = useRef(0);\n  const isAllSliding = useRef(false);\n  const isSlidingArray = useRef([0, 1, 2, 3, 4]);\n  const slideDirection = useRef(null);\n  const counterArray = useRef(new Array());\n  const progressArray = useRef(new Array());\n  const [changePage, setChangePage] = useState(false);\n\n  const progressBarAnimation = (targetProgress, targetNumber, time) => {\n    let currentProgress = 0;\n    const frame = () => {\n      if (targetNumber <= currentProgress) {\n        clearInterval(id)\n      } else {\n        currentProgress++;\n        targetProgress.style.width = currentProgress + \"%\";;\n      }\n    }\n    const id = setInterval(frame, time);\n  }\n\n  const scrollEvent = (e) => {\n    if (isAllSliding.current) return; // 모든 슬라이더가 끝나면\n    if (isMunuShow.current) return;\n    // console.log(\"clientX : \" + e.targetTouches[0].clientY);\n    // console.log(\"screenY : \" + e.targetTouches[0].screenY);\n    // console.log(\"page : \" + e.targetTouches[0].pageY);\n    // event.preventDefault();\n    if (e.deltaY < 0) {\n      // 스크롤 아래 방향으로\n      pageEvent(-1);\n    } else if (e.deltaY > 0) {\n      // 위로\n      pageEvent(1)\n    }\n  }\n\n  const menuToggle = () => {\n    isMunuShow.current = !isMunuShow.current;\n    if (isMunuShow.current) {\n      menuRef.current.style.transform = \"translateX(0%)\";\n      return\n    }\n    menuRef.current.style.transform = \"translateX(100%)\";\n  }\n\n  const pageEvent = (direction) => {\n    if (currentPage.current === 0 && direction === -1) return;\n    if (currentPage.current === pageArray.length - 1 && direction === 1) return;\n\n    isAllSliding.current = true;\n    pageArray[currentPage.current].style.zIndex = `0`;\n    pageArray[currentPage.current].classList.remove(\"active\");\n\n    currentPage.current += direction;\n    slideDirection.current = -direction;\n    isSlidingArray.current[currentPage.current] = 0;\n\n    pageArray[currentPage.current].style.zIndex = `1`;\n    pageArray[currentPage.current].style.transform = `translateX(0px)`;\n    pageArray[currentPage.current].classList.add(\"active\");\n    setChangePage({});\n\n    setTimeout(() => {\n      for (let i = 0; i < pageArray.length; i++) {\n        if (currentPage.current === i) continue\n        const screenWidth = document.body.offsetWidth;\n        isSlidingArray.current[i] += slideDirection.current;\n        const distance = screenWidth * isSlidingArray.current[i];\n        pageArray[i].style.transform = `translateX(${distance}px)`;\n      }\n      isAllSliding.current = false;\n    }, 800);\n  }\n\n  const menuNavContentClick = (changePageIndex) => {\n    if (currentPage.current === changePageIndex) return;\n    currentPage.current = changePageIndex;\n    setChangePage({});\n    pageArray[currentPage.current].style.zIndex = `1`;\n    pageArray[currentPage.current].style.transform = `translateX(0px)`;\n    pageArray[currentPage.current].classList.add(\"active\");\n\n    isAllSliding.current = true;\n    pageArray[currentPage.current].style.zIndex = `0`;\n    let j = 1;\n    for (let i = currentPage.current + 1; i < pageArray.length; i++) {\n      const screenWidth = document.body.offsetWidth;\n      isSlidingArray.current[i] = j;\n      pageArray[i].classList.remove(\"active\");\n      const distance = screenWidth * isSlidingArray.current[i];\n      pageArray[i].style.transform = `translateX(${distance}px)`;\n      j++\n    }\n    j = -1;\n    for (let i = currentPage.current - 1; i >= 0; i--) {\n      const screenWidth = document.body.offsetWidth;\n      isSlidingArray.current[i] = j;\n      pageArray[i].classList.remove(\"active\");\n      const distance = screenWidth * isSlidingArray.current[i];\n      pageArray[i].style.transform = `translateX(${distance}px)`;\n      j--;\n    }\n    menuToggle();\n    isAllSliding.current = false;\n  }\n\n  useEffect(() => {\n\n    for (let i = 0; i < pageArray.length; i++) {\n      if (i <= currentPage.current) {\n        progressSliderArray.current.children[i].classList.add(\"fill\");\n        continue\n      }\n      progressSliderArray.current.children[i].classList.remove(\"fill\");\n    }\n\n    for (let i = 0; i < pageArray.length; i++) {\n      if (i === currentPage.current) {\n        menuContentsRef.current.children[i].children[0].classList.add(\"current-maraker\");\n        continue\n      }\n      menuContentsRef.current.children[i].children[0].classList.remove(\"current-maraker\");\n    }\n\n    if (currentPage.current !== 2) return\n    for (let i = 0; i < counterArray.current.length; i++) {\n      const counter = counterArray.current[i].innerText;\n      const progressBar = progressArray.current[i];\n      progressBar.style.width = \"0%\";\n      progressBarAnimation(progressBar, counter, 10);\n    }\n  }, [changePage])\n\n  useEffect(() => {\n    for (let i = 0; i < pageArray.length; i++) {\n      const screenWidth = document.body.offsetWidth;\n      const distance = screenWidth * i;\n      pageArray[i].style.transform = `translateX(${distance}px)`;\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('wheel', scrollEvent);\n    window.addEventListener('touchmove', scrollEvent)\n    return () => {\n      window.removeEventListener('wheel', scrollEvent);\n      window.removeEventListener('touchmove', scrollEvent)\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div ref={menuRef} className=\"offcanvas-menu flex-direction-column\">\n          <div className=\"offcanvas-menu-header\">\n            <div onClick={menuToggle} className=\"offcanvas-menu-header-close\">\n              <i className=\"far fa-window-close icon\"></i>\n            </div>\n          </div>\n          <nav className=\"offcanvas-menu-navbar\">\n            <ul\n              ref={menuContentsRef}\n              className=\"offcanvas-menu-navbar-content-list row flex-direction-column\">\n              <li data-menuanchor=\"home\" className=\"offcanvas-menu-navbar-content\"><h3 onClick={() => { menuNavContentClick(0) }}>home</h3></li>\n              <li data-menuanchor=\"service\" className=\"offcanvas-menu-navbar-content\"><h3 onClick={() => { menuNavContentClick(1) }}>service</h3></li>\n              <li data-menuanchor=\"stack\" className=\"offcanvas-menu-navbar-content\"><h3 onClick={() => { menuNavContentClick(2) }}>stack</h3></li>\n              <li data-menuanchor=\"portfolio\" className=\"offcanvas-menu-navbar-content\"><h3 onClick={() => { menuNavContentClick(3) }}>portfolio</h3></li>\n              <li data-menuanchor=\"contact\" className=\"offcanvas-menu-navbar-content\"><h3 onClick={() => { menuNavContentClick(4) }}>contact</h3></li>\n            </ul>\n          </nav>\n          <footer className=\"offcanvas-menu-footer\">\n            <nav className=\"offcanvas-menu-footer-navbar\">\n              <ul className=\"offcanvas-menu-footer-navbar-content-list\">\n                <li className=\"offcanvas-menu-footer-navbar-content\">\n                  <button className=\"offcanvas-menu-footer-navbar-content--github\">\n                    <i className=\"fab fa-github github-icon icon\"></i>\n                  </button>\n                </li>\n                <li className=\"offcanvas-menu-footer-navbar-content\">\n                  <button className=\"offcanvas-menu-footer-navbar-content--email\">\n                    <i className=\"far fa-envelope email-icon icon\"></i>\n                  </button>\n                </li>\n              </ul>\n            </nav>\n          </footer>\n        </div>\n        <nav className=\"navbar\">\n          <div className=\"navbar-inner row\">\n            <div className=\"navbar-inner--left\">\n              <a className=\"navbar-logo\">\n                Hello!\n              </a>\n              <a className=\"navbar-email\">justsicklife@gmail.com</a>\n            </div>\n            <div className=\"navbar-inner--right\">\n              <div onClick={menuToggle} className=\"navbar-burger\">\n                <i className=\"fas fa-bars icon\"></i>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </header>\n      <footer className=\"footer\">\n\n      </footer>\n      <main className=\"slide\">\n        <ul ref={progressSliderArray} className=\"fullpage-slider-progress-bar is-show\">\n          <li data-menuanchor=\"home\"></li>\n          <li data-menuanchor=\"service\"></li>\n          <li data-menuanchor=\"stack\"></li>\n          <li data-menuanchor=\"portfolio\"></li>\n          <li data-menuanchor=\"contact\"></li>\n        </ul>\n        <ul ref={slideWrapRef} className=\"slide-wrap\">\n          {/* home start*/}\n          <li\n            ref={(element => {\n              if (pageArray[0]) return\n              pageArray.push(element)\n            })}\n            className=\"home page page0 active\">\n            <div className=\"vertical-align\">\n              <div className=\"container\">\n                <div className=\"introduce row flex-direction-column \">\n                  <div className=\"introduce-name\">\n                    <h5>정하형</h5>\n                  </div>\n                  <div className=\"introduce-title\">\n                    <h1>저는 유쾌한 프론트엔드 개발자 입니다.</h1>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n          {/* home end*/}\n          {/* service start*/}\n          <li\n            ref={(element => {\n              if (pageArray[1]) return\n              pageArray.push(element)\n            })}\n            className=\"service page page1\">\n            <div className=\"vertical-align\">\n              <div className=\"container\">\n                <div className=\"row flex-direction-column\">\n                  <div className=\"service-preface\">\n                    <h4>안녕하세요 프론트엔드 개발자 정하형 입니다.</h4>\n                  </div>\n                  <ul className=\"service-list\">\n                    {/* hover event 추가 */}\n                    <li className=\"service-box service-box0 row\">\n                      <div className=\"service-icon\">\n                        <span><i className=\"fas fa-laptop-code\"></i></span>\n                      </div>\n                      <div className=\"service-title\">\n                        <h3>웹 개발을 할수있어요 !</h3>\n                      </div>\n                      <div className=\"service-description\">\n                        <p>네.</p>\n                      </div>\n                    </li>\n                    <li className=\"service-box service-box1 row\">\n                      <div className=\"service-icon\">\n                        <span><i className=\"fas fa-search-plus\"></i></span>\n                      </div>\n                      <div className=\"service-title\">\n                        <h3>최적화를 중요하게 생각합니다.</h3>\n                      </div>\n                      <div className=\"service-description\">\n                        <p>사용자의 메모리를 최소한으로 사용할수 있게 항상 고민합니다.</p>\n                      </div>\n                    </li>\n                    <li className=\"service-box service-box2 row\">\n                      <div className=\"service-icon\">\n                        <span><img></img></span>\n                      </div>\n                      <div className=\"service-title\">\n                        <h3>웹 개발을 할수있어요 !</h3>\n                      </div>\n                      <div className=\"service-description\">\n                        <p>네.</p>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </li>\n          {/* service end*/}\n          <li\n            ref={(element => {\n              if (pageArray[2]) return\n              pageArray.push(element)\n            })}\n            className=\"stack page page2\">\n            <div className=\"vertical-align\">\n              <div className=\"container\">\n                <div className=\"row align-items-center stack-row\">\n                  <figure className=\"photo\">\n                    <div className=\"photo-inside\">\n                      <img src={stackPhoto}></img>\n                    </div>\n                    {/* <figcaption>\n                      마땅히 올릴 사진이 없어서...\n                    </figcaption> */}\n                  </figure>\n                  <div className=\"stack-wrap\">\n                    <div className=\"stack-title\">\n                      <h4>저는 최적화 와 친밀한 디자인을 중요시 여기면서 웹 사이트를 만드는 것을 즐겨합니다.</h4>\n                    </div>\n                    <ul className=\"progress-bar-list\">\n                      <li className=\"progress-bar-wrap\">\n                        <div className=\"progress-bar-title\">\n                          <h5>\n                            자바스크립트 <span ref={(element => {\n                              if (counterArray.current[0]) return\n                              counterArray.current.push(element)\n                            })} className=\"counter\">87</span>\n                          </h5>\n                        </div>\n                        <div className=\"progress-bar progress-bar00\">\n                          <span ref={(element => {\n                            if (progressArray.current[0]) return\n                            progressArray.current.push(element)\n                          })} ></span>\n                        </div>\n                      </li>\n                      <li className=\"progress-bar-wrap\">\n                        <div className=\"progress-bar-title\">\n                          <h5>\n                            html <span ref={(element => {\n                              if (counterArray.current[1]) return\n                              counterArray.current.push(element)\n                            })} className=\"counter\">70</span>\n                          </h5>\n                        </div>\n                        <div className=\"progress-bar progress-bar01\">\n                          <span ref={(element => {\n                            if (progressArray.current[1]) return\n                            progressArray.current.push(element)\n                          })}></span>\n                        </div>\n                      </li>\n                      <li className=\"progress-bar-wrap\">\n                        <div className=\"progress-bar-title\">\n                          <h5>\n                            css <span ref={(element => {\n                              if (counterArray.current[2]) return\n                              counterArray.current.push(element)\n                            })} className=\"counter\"> 75</span>\n                          </h5>\n                        </div>\n                        <div className=\"progress-bar progress-bar02\">\n                          <span ref={(element => {\n                            if (progressArray.current[2]) return\n                            progressArray.current.push(element)\n                          })} ></span>\n                        </div>\n                      </li>\n                      <li className=\"progress-bar-wrap\">\n                        <div className=\"progress-bar-title\">\n                          <h5>\n                            react <span ref={(element => {\n                              if (counterArray.current[3]) return\n                              counterArray.current.push(element)\n                            })} className=\"counter\">80</span>\n                          </h5>\n                        </div>\n                        <div className=\"progress-bar progress-bar03\">\n                          <span ref={(element => {\n                            if (progressArray.current[3]) return\n                            progressArray.current.push(element)\n                          })} ></span>\n                        </div>\n                      </li>\n                      <li className=\"progress-bar-wrap\">\n                        <div className=\"progress-bar-title\">\n                          <h5>\n                            redux <span ref={(element => {\n                              if (counterArray.current[4]) return\n                              counterArray.current.push(element)\n                            })} className=\"counter\">85</span>\n                          </h5>\n                        </div>\n                        <div className=\"progress-bar progress-bar04\">\n                          <span ref={(element => {\n                            if (progressArray.current[4]) return\n                            progressArray.current.push(element)\n                          })} ></span>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n          <li\n            ref={(element => {\n              if (pageArray[3]) return\n              pageArray.push(element)\n            })}\n            className=\"portfolio page3 page\">\n            <div className=\"vertical-align\">\n              <div className=\"container\">\n                <div className=\"portfolio-header\">\n                  <div className=\"portfolio-perpace\"><h3>portfolio</h3></div>\n                  <div className=\"portfolio-slide row\">\n                    <div className=\"portfolio-slide-button--right\">\n                      <button><i className=\"fas fa-arrow-left icon-right icon\"></i></button>\n                    </div>\n                    <div className=\"portfolio-current-page\">1</div>\n                    <div className=\"protfolio-separator-page\">/</div>\n                    <div className=\"portfolio-max-page\">2</div>\n                    <div className=\"portfolio-slide-button--left\">\n                      <button><i className=\"fas fa-arrow-right icon-left icon\"></i></button>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row justify-content-center\">\n                  <div className=\"portfolio-photo-wrap\">\n                    <div className=\"portfolio-photo\">\n                      <div>\n                        <span>이미지</span>\n                        <img></img>\n                      </div>\n                    </div>\n                    <div className=\"gap-15\"></div>\n                    <div className=\"portfolio-view\">\n                      <div className=\"portfolio-view--github\">깃허브</div>\n                      <div className=\"portfolio-view--web-page\">사이트</div>\n                    </div>\n                  </div>\n                  <div className=\"portfolio-explanation row flex-direction-column\">\n                    <div className=\"portfolio-title-preface\">\n                      <h3>이름</h3>\n                    </div>\n                    <div className=\"portfolio-title\">비틀즈 소개 사이트</div>\n                    <div className=\"portfolio-description-preface\">\n                      <h3>설명</h3>\n                    </div>\n                    <div className=\"portfolio-description\">비틀즈의 노래를 좋아해서 만들어본 비틀즈 소개 사이트</div>\n                    <div className=\"portfolio-used-stack-preface\">\n                      <h3>사용된 기술</h3>\n                    </div>\n                    <ul className=\"portfolio-used-stack-list\">\n                      <li className=\"portfolio-used-stack\">\n                        <div className=\"portfolio-used-stack--react\">\n                          <i className=\"fab fa-react stack-icon stack-icon-react\"></i>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n          <li\n            ref={(element => {\n              if (pageArray[4]) return\n              pageArray.push(element)\n            })}>\n            <div className=\"contact page page4\">\n              <div className=\"vertical-align\">\n                <div className=\"container\">\n                  <div className=\"row flex-direction-column contact-row\">\n                    <div className=\"contact-title\">\n                      <h3>다음에 보겠습니다.</h3>\n                    </div>\n                    <div className=\"contant-email\">\n                      <a>justsicklife@gmail.com</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </main>\n    </div >\n  );\n}\n\nexport default App;",["31","32"],"C:\\Users\\user\\react\\portfolio\\src\\reportWebVitals.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":12,"column":21,"nodeType":"39","messageId":"40","endLine":12,"endColumn":32},{"ruleId":"37","severity":1,"message":"38","line":17,"column":31,"nodeType":"39","messageId":"40","endLine":17,"endColumn":42},{"ruleId":"37","severity":1,"message":"38","line":18,"column":32,"nodeType":"39","messageId":"40","endLine":18,"endColumn":43},{"ruleId":"41","severity":1,"message":"42","line":145,"column":6,"nodeType":"43","endLine":145,"endColumn":18,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":153,"column":6,"nodeType":"43","endLine":153,"endColumn":8,"suggestions":"46"},{"ruleId":"41","severity":1,"message":"47","line":162,"column":6,"nodeType":"43","endLine":162,"endColumn":8,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":204,"column":15,"nodeType":"51","endLine":204,"endColumn":42},{"ruleId":"49","severity":1,"message":"50","line":207,"column":15,"nodeType":"51","endLine":207,"endColumn":43},{"ruleId":"52","severity":1,"message":"53","line":289,"column":31,"nodeType":"51","endLine":289,"endColumn":36},{"ruleId":"52","severity":1,"message":"53","line":315,"column":23,"nodeType":"51","endLine":315,"endColumn":45},{"ruleId":"52","severity":1,"message":"53","line":439,"column":25,"nodeType":"51","endLine":439,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":485,"column":23,"nodeType":"51","endLine":485,"endColumn":26},{"ruleId":"33","replacedBy":"54"},{"ruleId":"35","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pageArray.length'. Either include it or remove the dependency array.","ArrayExpression",["58"],"React Hook useEffect has a missing dependency: 'pageArray'. Either include it or remove the dependency array.",["59"],"React Hook useEffect has a missing dependency: 'scrollEvent'. Either include it or remove the dependency array.",["60"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [changePage, pageArray.length]",{"range":"67","text":"68"},"Update the dependencies array to be: [pageArray]",{"range":"69","text":"70"},"Update the dependencies array to be: [scrollEvent]",{"range":"71","text":"72"},[5007,5019],"[changePage, pageArray.length]",[5261,5263],"[pageArray]",[5537,5539],"[scrollEvent]"]